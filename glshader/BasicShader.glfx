////GLOBAL
#version 430

////DEFINES

//!! have switch to choose if texture is weighted by diffuse/glossy or is just used raw?

#define NUM_BALL_LIGHTS 0 // just to avoid having too much constant mem allocated

layout(std140) uniform matrixBlock {
	mat4 matView;
	mat4 matWorldView;
	mat3x4 matWorldViewInverseTranspose;
	vec4 unusedFillerFormatWorldViewInverseTranspose;
	mat4 matWorldViewProj[eyes];
};

uniform bool ignoreStereo = false; // Must be able to force only one invocation for drawing bulb light texture

////VERTEX

////GEOMETRY
#extension GL_ARB_viewport_array : enable

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

// Use geometry invocations for stereo rendering
#if (eyes == 1)
   layout(invocations = 1) in;
#else
   layout(invocations = 2) in;
#endif

////FRAGMENT
// Early-Z-test implementation:
// Don't enable early_fragment_tests in basicshader, only enable conservative_depth
// Otherwise shader will cull unintended things like mini-playfield under regular playfield
//#extension GL_ARB_shader_image_load_store : enable
#extension GL_ARB_conservative_depth : enable
//layout(early_fragment_tests) in;
layout(depth_unchanged) out float gl_FragDepth;

uniform sampler2D Texture0; // base texture
uniform sampler2D Texture1; // envmap
uniform sampler2D Texture2; // envmap radiance
uniform sampler2D Texture3; // bulb light buffer
uniform sampler2D Texture4; // normal map

uniform bool objectSpaceNormalMap;
uniform bool is_metal;
uniform bool doNormalMapping;

#include "Helpers.fxh"
#include "Material.fxh"

uniform vec4 cClearcoat_EdgeAlpha;
uniform vec4 cGlossy_ImageLerp;
//!! No value is under 0.02
//!! Non-metals value are un-intuitively low: 0.02-0.08
//!! Gemstones are 0.05-0.17
//!! Metals have high specular reflectance: 0.5-1.0

uniform vec4 staticColor_Alpha;

uniform float alphaTestValue;

out vec4 color;

mat3 TBN_trafo(vec3 N, vec3 V, vec2 uv)
{
	// derivatives: edge vectors for tri-pos and tri-uv
	vec3 dpx = dFdx(V);
	vec3 dpy = dFdy(V);
	vec2 duvx = dFdx(uv);
	vec2 duvy = dFdy(uv);

	// solve linear system
	vec3 dp2perp = cross(N, dpy);
	vec3 dp1perp = cross(dpx, N);
	vec3 T = dp2perp * duvx.x + dp1perp * duvy.x;
	vec3 B = dp2perp * duvx.y + dp1perp * duvy.y;

	// construct scale-invariant transformation
	return mat3(T, B, N * sqrt( max(dot(T,T), dot(B,B)) )); // inverse scale, as will be normalized anyhow later-on (to save some mul's)
}

vec3 normal_map(vec3 N, vec3 V, vec2 uv)
{
   vec3 tn = texture(Texture4, uv).xyz * (255./127.) - (128./127.); // Note that Blender apparently does export tangent space normalmaps for Z (Blue) at full range, so 0..255 -> 0..1, which misses an option for here!

   if (objectSpaceNormalMap)
   {
      tn.z = -tn.z; // this matches the object space, +X +Y +Z, export/baking in Blender with our trafo setup
      return normalize((inverse(matView) * vec4(tn,0.0)).xyz);
   } else // tangent space
      return normalize((tn * TBN_trafo(N, V, uv)).xyz);  // !! The order of tn, and TBN_trainfo matters here?  Ship on FishTales gets blown out if you reverse them 
}

float GeometricOpacity(float NdotV, float alpha/*, float blending, float t*/)
{
    // blending = cClearcoat_EdgeAlpha.w, no need to pass uniform
    // t = Roughness_WrapL_Edge_Thickness.w, no need to pass uniform
    //old version without thickness
    //return mix(alpha, 1.0, blending*pow(1.0-abs(NdotV),5)); // fresnel for falloff towards silhouette

    //new version (COD/IW, t = thickness), t = 0.05 roughly corresponds to above version
    float x = abs(NdotV); // flip normal in case of wrong orientation (backside lighting)

    float g = cClearcoat_EdgeAlpha.w - cClearcoat_EdgeAlpha.w * ( x / (x * (1.0 - Roughness_WrapL_Edge_Thickness.w ) + Roughness_WrapL_Edge_Thickness.w) ); // Smith-Schlick G
    return mix(alpha, 1.0, g); // fake opacity lerp to ‘shadowed’
}

vec3 lightLoop(vec3 pos, vec3 N, vec3 V, vec3 diffuse, vec3 glossy, vec3 specular, float edge, bool fix_normal_orientation, bool is_metal) // input vectors (N,V) are normalized for BRDF evals
{
   // normalize BRDF layer inputs //!! use diffuse = (1-glossy)*diffuse instead?
   float diffuseMax = max(diffuse.x,max(diffuse.y,diffuse.z));
   float glossyMax = max(glossy.x,max(glossy.y,glossy.z));
   float specularMax = max(specular.x,max(specular.y,specular.z)); //!! not needed as 2nd layer only so far
   float sum = diffuseMax + glossyMax /*+ specularMax*/;
   if(sum > 1.0 && fDisableLighting_top_below.x < 1.0)
   {
      float invsum = 1.0/sum;
      diffuse  *= invsum;
      glossy   *= invsum;
      //specular *= invsum;
   }

   float NdotV = dot(N,V);
   if(fix_normal_orientation && (NdotV < 0.0)) // flip normal in case of wrong orientation? (backside lighting), currently disabled if normal mapping active, for that case we should actually clamp the normal with respect to V instead (see f.e. 'view-dependant shading normal adaptation')
   {
      N = -N;
      NdotV = -NdotV;
   }

   vec3 color = vec3(0.0, 0.0, 0.0);

   // 1st Layer
    if((!is_metal && (diffuseMax > 0.0)) || (glossyMax > 0.0))
    {
        for(int i = 0; i < lightSources; i++)//Rendering issues when doing this in an loop. Weird.
            color += DoPointLight(pos, N, V, diffuse, glossy, edge, i, is_metal); // no clearcoat needed as only pointlights so far
    }

   if(!is_metal && (diffuseMax > 0.0))
      color += DoEnvmapDiffuse(normalize((vec4(N,0.0) * matView).xyz), diffuse); // trafo back to world for lookup into world space envmap // actually: mul(vec4(N,0.0), matViewInverseInverseTranspose), but optimized to save one matrix

   if((glossyMax > 0.0) || (specularMax > 0.0))
   {  
	   vec3 R = (2.0*NdotV)*N - V; // reflect(-V,n);
	   R = normalize((vec4(R,0.0) * matView).xyz); // trafo back to world for lookup into world space envmap // actually: mul(vec4(R,0.0), matViewInverseInverseTranspose), but optimized to save one matrix

	   vec2 Ruv = vec2( // remap to 2D envmap coords
			0.5 + atan2_approx_div2PI(R.y, R.x),
			acos_approx_divPI(R.z));
          
#if !enable_VR
	vec4 colorMip = texture(Texture1, Ruv);
#else
      // Abuse mipmaps to reduce shimmering in VR
      vec4 colorMip;
      if (is_metal)
      {
         // Use low-res mipmap for metallic objects to reduce shimmering in VR
         // Closer objects we query the lod and add 2 to make it a bit blurrier but always at least 6.0
         // Far away objects we get smallest lod and divide by 1.6 which is a good trade-off between "metallic enough" and "low shimmer"
         float mipLevel = min(textureQueryLod(Texture1, Ruv).y+2.0, textureQueryLevels(Texture1)/1.6);
         if (mipLevel < 6.0)
            mipLevel = 6.0;
         colorMip = textureLod(Texture1, Ruv, mipLevel);
      }
      else
      {
         // For non-metallic objects we use different values
         //colorMip = texture(Texture1, Ruv);
         float mipLevel = min(textureQueryLod(Texture1, Ruv).y, textureQueryLevels(Texture1)/2);
         if (mipLevel < 4.0)
            mipLevel = 4.0;
         colorMip = textureLod(Texture1, Ruv, mipLevel);
      }
#endif
         
      vec3 envTex = colorMip.rgb;

      // EnvmapGlossy
      if(glossyMax > 0.0)
        color += glossy * envTex * fenvEmissionScale_TexWidth.x;

      // Envmap2ndLayer
      if(fix_normal_orientation && specularMax > 0.0)
      {
        vec3 w = FresnelSchlick(specular, NdotV, Roughness_WrapL_Edge_Thickness.z);
        color = mix(color, envTex * fenvEmissionScale_TexWidth.x, w);
      }
   }

   return /*Gamma(ToneMap(*/color/*))*/;
}

//------------------------------------
//
// Standard Materials
//

////vs_main

in vec3 vPosition;
in vec3 vNormal;
in vec2 tc;

out vec2 tex01_gs;
out vec2 tex03_gs;
out vec3 worldPos_gs;
out vec3 normal_gs;
out float gl_ClipDistance[1];

void main()
{
   gl_Position = vec4(vPosition, 1.0);
   gl_ClipDistance[0] = dot(vPosition, vec3(0, 1, 0)); // For Render Dynamic Mirror when enabling clipping.
   tex01_gs = tc;
   vec4 bulbPos = (matWorldViewProj[0]*vec4(vPosition, 1.0));
   tex03_gs = vec2(bulbPos.xy/bulbPos.w);
   worldPos_gs = (matWorldView*vec4(vPosition, 1.0)).xyz;
   normal_gs = normalize((matWorldViewInverseTranspose*vNormal).xyz);
}

////vs_notex_main

in vec3 vPosition;
in vec3 vNormal;
in vec2 tc;

out vec2 tex03_gs;
out vec3 worldPos_gs;
out vec3 normal_gs;
out float gl_ClipDistance[1];

void main()
{
   gl_Position = vec4(vPosition, 1.0);
   gl_ClipDistance[0] = dot(vPosition, vec3(0, 1, 0)); // For Render Dynamic Mirror when enabling clipping.
   vec4 bulbPos = (matWorldViewProj[0]*vec4(vPosition, 1.0));
   tex03_gs = vec2(bulbPos.xy/bulbPos.w);
   worldPos_gs = (matWorldView*vec4(vPosition, 1.0)).xyz;
   normal_gs = normalize((matWorldViewInverseTranspose*vNormal).xyz);
}

////vs_depth_only_main_without_texture

in vec3 vPosition;

void main()
{ 
   gl_Position = vec4(vPosition, 1.0);
}

////vs_depth_only_main_with_texture

in vec3 vPosition;
in vec2 tc;

out vec2 tex0_gs;

void main()
{
   gl_Position = vec4(vPosition, 1.0);
   tex0_gs = tc;
}

////gs_main

in vec2 tex01_gs[];
out vec2 tex01;

in vec2 tex03_gs[];
out vec2 tex03;

in vec3 worldPos_gs[];
out vec3 worldPos;

in vec3 normal_gs[];
out vec3 normal;

void main()
{
   gl_ViewportIndex = gl_InvocationID;
   for (int i=0;i<gl_in.length();i++) {
      //Default
      gl_Position = (matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position);
      gl_ClipDistance[0] = gl_in[i].gl_ClipDistance[0]; // For Render Dynamic Mirror when enabling clipping.
      //Custom
      tex01 = tex01_gs[i];
      tex03 = tex03_gs[i];
      worldPos = worldPos_gs[i];
      normal = normal_gs[i];
      //Default
      EmitVertex();
   }
   EndPrimitive();
}

////gs_notex_main

in vec2 tex03_gs[];
out vec2 tex03;

in vec3 worldPos_gs[];
out vec3 worldPos;

in vec3 normal_gs[];
out vec3 normal;

void main()
{
   gl_ViewportIndex = gl_InvocationID;
   for (int i=0;i<gl_in.length();i++) {
      //Default
      gl_Position = (matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position);
      gl_ClipDistance[0] = gl_in[i].gl_ClipDistance[0];  // For Render Dynamic Mirror when enabling clipping.
      //Custom
      tex03 = tex03_gs[i];
      worldPos = worldPos_gs[i];
      normal = normal_gs[i];
      //Default
      EmitVertex();
   }
   EndPrimitive();
}

////gs_kicker_main

in vec2 tex03_gs[];
out vec2 tex03;

in vec3 worldPos_gs[];
out vec3 worldPos;

in vec3 normal_gs[];
out vec3 normal;

void main()
{
   gl_ViewportIndex = gl_InvocationID;
   for (int i=0;i<gl_in.length();i++) {
      //Default
      vec4 P2 = gl_in[i].gl_Position;
      P2.z -= 30.0f*1.0f; // 1.0f = fKickerScale
      gl_Position.xyw = (matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position).xyw;
      gl_Position.z = (matWorldViewProj[gl_InvocationID]*P2).z;
      //Custom
      tex03 = tex03_gs[i];
      worldPos = worldPos_gs[i];
      normal = normal_gs[i];
      //Default
      EmitVertex();
   }
   EndPrimitive();
}

////gs_depth_only_main_without_texture

void main()
{
   gl_ViewportIndex = gl_InvocationID;
   for (int i=0;i<gl_in.length();i++) {
      //Default
      gl_Position = (matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position);;
      //Custom
      //Default
      EmitVertex();
   }
   EndPrimitive();
}

////gs_depth_only_main_with_texture

in vec2 tex0_gs[];
out vec2 tex0;

void main()
{
   gl_ViewportIndex = gl_InvocationID;
   for (int i=0;i<gl_in.length();i++) {
      //Default
      gl_Position = (matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position);
      //Custom
      tex0 = tex0_gs[i];
      //Default
      EmitVertex();
   }
   EndPrimitive();
}

////ps_main_notex

in vec2 tex03;
in vec3 worldPos;
in vec3 normal;

void main() {
   vec3 diffuse  = cBase_Alpha.xyz;
   vec3 glossy   = is_metal ? cBase_Alpha.xyz : cGlossy_ImageLerp.xyz*0.08;
   vec3 specular = cClearcoat_EdgeAlpha.xyz*0.08;
   float edge    = is_metal ? 1.0 : Roughness_WrapL_Edge_Thickness.z;

   vec3 V = normalize(-worldPos);
   vec3 N = normalize(normal);

   //color = vec4((N+1.0)*0.5,1.0); return; // visualize normals

   color.xyz = lightLoop(worldPos, N, V, diffuse, glossy, specular, edge, true, is_metal); //!! have a "real" view vector instead that mustn't assume that viewer is directly in front of monitor? (e.g. cab setup) -> viewer is always relative to playfield and/or user definable
   color.a = clamp(cBase_Alpha.a, 0.0, 1.0);

   if (cBase_Alpha.a < 1.0) {
      color.a = GeometricOpacity(max(dot(N,V), 0.0), color.a);

      if (fDisableLighting_top_below.y < 1.0)
          // add light from "below" from user-flagged bulb lights, pre-rendered/blurred in previous renderpass //!! sqrt = magic
          color.xyz += mix(sqrt(diffuse)*texture(Texture3, vec2(0.5*tex03.xy)+0.5, 0).xyz*color.a, vec3(0.), fDisableLighting_top_below.y); //!! depend on normal of light (unknown though) vs geom normal, too?
      }

   color *= staticColor_Alpha;
}

////ps_main_texture

in vec2 tex01;
in vec2 tex03;
in vec3 worldPos;
in vec3 normal;

void main() {
   vec4 pixel = texture(Texture0, tex01);

   if (pixel.a <= alphaTestValue)
      discard;           //stop the pixel shader if alpha test should reject pixel

   if (fDisableLighting_top_below.x < 1.0) // if there is lighting applied, make sure to clamp the values (as it could be coming from a HDR tex)
      pixel.xyz = clamp(pixel.xyz, vec3(0.0,0.0,0.0), vec3(1.0,1.0,1.0));

   vec3 t = pixel.xyz;

   vec3 diffuse  = t*cBase_Alpha.xyz;
   vec3 glossy   = is_metal ? diffuse : (t*cGlossy_ImageLerp.w + (1.0-cGlossy_ImageLerp.w))*cGlossy_ImageLerp.xyz*0.08; //!! use AO for glossy? specular?
   vec3 specular = cClearcoat_EdgeAlpha.xyz*0.08;
   float edge    = is_metal ? 1.0 : Roughness_WrapL_Edge_Thickness.z;

   vec3 V = normalize(-worldPos);
   vec3 N = normalize(normal);

   if (doNormalMapping)
	  N = normal_map(N, normalize(worldPos), tex01);
   
   //color = vec4((N+1.0)*0.5,1.0); return; // visualize normals

   color.xyz = lightLoop(worldPos, N, V, diffuse, glossy, specular, edge, !doNormalMapping, is_metal);
   color.a = clamp(pixel.a * cBase_Alpha.a, 0.0, 1.0);

   if (cBase_Alpha.a < 1.0 && color.a < 1.0) {
      color.a = GeometricOpacity(max(dot(N,V), 0.0), color.a);

      if (fDisableLighting_top_below.y < 1.0)
      {
         // add light from "below" from user-flagged bulb lights, pre-rendered/blurred in previous renderpass //!! sqrt = magic
         color.xyz += mix(sqrt(diffuse)*texture(Texture3, vec2(0.5*tex03.xy)+0.5).xyz*color.a, vec3(0.), fDisableLighting_top_below.y); //!! depend on normal of light (unknown though) vs geom normal, too?
      }
   }

   color *= staticColor_Alpha;
}

////ps_main_depth_only_without_texture

void main() {
    color =  vec4(0.,0.,0.,1.);
}

////ps_main_depth_only_with_texture

in vec2 tex0;

void main() {
   if (textureLod(Texture0, tex0, 0).a <= alphaTestValue)
      discard;           //stop the pixel shader if alpha test should reject pixel

   color = vec4(0., 0., 0., 1.);
}

////ps_main_bg_decal

// BG-Decal

void main() {
   color = vec4(InvToneMap(cBase_Alpha.xyz), clamp(cBase_Alpha.a, 0.0, 1.0));
}

////ps_main_bg_decal_texture

in vec2 tex01;

void main() {
   vec4 pixel = texture(Texture0, tex01);

   //if (pixel.a <= alphaTestValue) discard;

   pixel.a = clamp(pixel.a * cBase_Alpha.a, 0.0, 1.0);

   color = vec4(InvToneMap(pixel.xyz*cBase_Alpha.xyz), pixel.a);
}


//------------------------------------------
// Kicker boolean vertex shader

////vs_kicker

in vec3 vPosition;
in vec3 vNormal;
in vec2 tc;

out vec3 worldPos_gs;
out vec3 normal_gs;
out vec2 tex03_gs;

void main() {
   vec4 vPosition4 = vec4(vPosition,1.0);
   gl_Position = vPosition4;
   vec4 bulbPos = (matWorldViewProj[0]*vec4(vPosition, 1.0));
   tex03_gs = vec2(bulbPos.xy/bulbPos.w);
   worldPos_gs = (matWorldView * vPosition4).xyz;
   normal_gs = normalize((matWorldViewInverseTranspose*vNormal).xyz);
}

//------------------------------------
// Techniques
//

//
// Standard Materials
//
////TECHNIQUES

basic_without_texture:P0:vs_notex_main():gs_notex_main():ps_main_notex()

basic_with_texture:P0:vs_main():gs_main():ps_main_texture()

basic_depth_only_without_texture:P0:vs_depth_only_main_without_texture():gs_depth_only_main_without_texture():ps_main_depth_only_without_texture()
basic_depth_only_with_texture:P0:vs_depth_only_main_with_texture():gs_depth_only_main_with_texture():ps_main_depth_only_with_texture()

//
// BG-Decal
//

bg_decal_without_texture:P0:vs_notex_main():gs_notex_main():ps_main_bg_decal()
bg_decal_with_texture:P0:vs_main():gs_main():ps_main_bg_decal_texture()

//
// Kicker
//

kickerBoolean:P0:vs_kicker():gs_kicker_main():ps_main_notex()

#include "ClassicLightShader.glfx"
